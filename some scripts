package com.javarush.test.level33.lesson15.big01.tests;// Created on 03.05.2016.

import com.javarush.test.level33.lesson15.big01.Helper;
import com.javarush.test.level33.lesson15.big01.Shortener;
import com.javarush.test.level33.lesson15.big01.strategies.HashBiMapStorageStrategy;
import com.javarush.test.level33.lesson15.big01.strategies.HashMapStorageStrategy;
import org.junit.Assert;
import org.junit.Test;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

public class SpeedTest {

    public long getTimeForGettingIds(Shortener shortener, Set<String> strings, Set<Long> ids){
        Long start = new Date().getTime();
        for (String value: strings){
            ids.add(shortener.getId(value));
        }
        Long finish = new Date().getTime();

        return finish - start;
    }

    public long getTimeForGettingStrings(Shortener shortener, Set<Long> ids, Set<String> strings){
        Long start = new Date().getTime();
        for (Long id: ids){
            strings.add(shortener.getString(id));
        }
        Long finish = new Date().getTime();

        return finish - start;
    }

    @Test
    public void testHashMapStorage(){
        Shortener shortener1 = new Shortener(new HashMapStorageStrategy());
        Shortener shortener2 = new Shortener(new HashBiMapStorageStrategy());

        Set<String> origStrings = new HashSet<>();
        for (int i = 0; i < 10000; i++) {
            origStrings.add(Helper.generateRandomString());
        }
        Set<Long> origIds1 = new HashSet<>();
        long IdTime1 = getTimeForGettingIds(shortener1, origStrings, origIds1);
        Set<Long> origIds2 = new HashSet<>();
        long IdTime2 = getTimeForGettingIds(shortener2, origStrings, origIds2);

        Assert.assertTrue(IdTime1 > IdTime2);

        Set<String> origStrings1 = new HashSet<>();
        long StringTime1 = getTimeForGettingStrings(shortener1, origIds1, origStrings1);
        Set<String> origStrings2 = new HashSet<>();
        long StringTime2 = getTimeForGettingStrings(shortener2, origIds2, origStrings2);

        Assert.assertEquals(StringTime1, StringTime2, 5);
    }
}

****

package com.javarush.test.level33.lesson15.big01.tests;// Created on 02.05.2016.

import com.javarush.test.level33.lesson15.big01.Helper;
import com.javarush.test.level33.lesson15.big01.Shortener;
import com.javarush.test.level33.lesson15.big01.strategies.*;
import org.junit.Assert;
import org.junit.Test;

public class FunctionalTest {
    public void testStorage(Shortener shortener){
        String s1 = Helper.generateRandomString();
        String s3 = new String(s1);
        String s2 = Helper.generateRandomString();

        Long id1 = shortener.getId(s1);
        Long id3 = shortener.getId(s3);
        Long id2 = shortener.getId(s2);

        Assert.assertNotEquals(id1, id2);
        Assert.assertNotEquals(id3, id2);
        Assert.assertEquals(id1, id3);

        String newS1 = shortener.getString(id1);
        String newS3 = shortener.getString(id3);
        String newS2 = shortener.getString(id2);

        Assert.assertEquals(s1, newS1);
        Assert.assertEquals(s2, newS2);
        Assert.assertEquals(s3, newS3);
    }
    @Test
    public void testHashMapStorageStrategy(){
        testStorage(new Shortener(new HashMapStorageStrategy()));
    }
    @Test
    public void testOurHashMapStorageStrategy(){
        testStorage(new Shortener(new OurHashMapStorageStrategy()));
    }
    @Test
    public void testFileStorageStrategy(){
        testStorage(new Shortener(new FileStorageStrategy()));
    }
    @Test
    public void testHashBiMapStorageStrategy(){
        testStorage(new Shortener(new HashBiMapStorageStrategy()));
    }
    @Test
    public void testDualHashBidiMapStorageStrategy(){
        testStorage(new Shortener(new DualHashBidiMapStorageStrategy()));
    }
    @Test
    public void testOurHashBiMapStorageStrategy(){
        testStorage(new Shortener(new OurHashBiMapStorageStrategy()));
    }
}

***

package com.javarush.test.level33.lesson15.big01;// Created on 01.05.2016.

import java.math.BigInteger;
import java.security.SecureRandom;

public class Helper {
    public static String generateRandomString(){
        SecureRandom random = new SecureRandom();
        return new BigInteger(130, random).toString(32);
    }

    public static void printMessage(String message){
        System.out.println(message);
    }
}

***

package com.javarush.test.level33.lesson15.big01.strategies;// Created on 02.05.2016.

import org.apache.commons.collections4.bidimap.DualHashBidiMap;

public class DualHashBidiMapStorageStrategy implements StorageStrategy {
    private DualHashBidiMap<Long, String> data = new DualHashBidiMap<>();

    @Override
    public boolean containsKey(Long key) {
        return data.containsKey(key);
    }

    @Override
    public boolean containsValue(String value) {
        return data.containsValue(value);
    }

    @Override
    public void put(Long key, String value) {
        data.put(key, value);
    }

    @Override
    public Long getKey(String value) {
        return data.getKey(value);
    }

    @Override
    public String getValue(Long key) {
        return data.get(key);
    }
}

***

package com.javarush.test.level33.lesson15.big01.strategies;// Created on 02.05.2016.

import com.google.common.collect.HashBiMap;

public class HashBiMapStorageStrategy implements StorageStrategy {
    private HashBiMap<Long, String> data = HashBiMap.create();

    @Override
    public boolean containsKey(Long key) {
        return data.containsKey(key);
    }

    @Override
    public boolean containsValue(String value) {
        return data.containsValue(value);
    }

    @Override
    public void put(Long key, String value) {
        data.put(key, value);
    }

    @Override
    public Long getKey(String value) {
        return data.inverse().get(value);
    }

    @Override
    public String getValue(Long key) {
        return data.get(key);
    }
}


***

